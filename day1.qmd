---
title: "Day 1"
format: html
fontsize: 10pt
theme: journal
execute: 
  warning: false
  error: false
  message: false
---

:::: {.columns}

::: {.column width="49%"}

# R 

Load the data into a `tibble` using the `tidyverse` packages. 

```{r}
library(tidyverse)

df <- tibble(
  num = as.numeric(
    read_lines("data/1.txt")
  )
) 
```

:::

::: {.column width="2%"}
<!-- empty column to create gap -->
:::

::: {.column width="49%"}

# Julia

Load the data into a `DataFrame` using `CSV`.
```{julia}
#| echo: true
#| output: false
using DelimitedFiles, CSV
using DataFrames, DataFramesMeta

df = CSV.read(
    "data/1.txt", 
    DataFrame, 
    ignoreemptyrows = false,
    header = ["x1"]
)
```
:::

::::


:::: {.columns}

::: {.column width="49%"}

Group the individuals by adding a cumulative sum of missing values, then sum within groups.

```{r}
solve_day <- function(df){
  prep <- df %>% 
    mutate(id = cumsum(is.na(num))) %>%
    group_by(id) %>%
    summarize(total_cal = sum(num, na.rm = TRUE)) %>%
    arrange(desc(total_cal))

  p1 <- slice(prep, 1) |> pull(total_cal)
  p2 <- slice(prep, 1:3) |> pull(total_cal) |> sum()

  return(c(p1, p2))
}
```

:::

::: {.column width="2%"}
<!-- empty column to create gap -->
:::

::: {.column width="49%"}

Calculate two lagged sums and sum the whole table using `ShiftedArrays`.

```{julia}
#| output: false
function solve_day(df)
  p2 = @chain df begin
    @transform :id = cumsum(ismissing.(:x1))
    groupby(:id)
    @combine :total_cal = sum(skipmissing(:x1))
    @aside p1 = maximum(_.total_cal)
    @orderby(:total_cal * -1)
    sum(_.total_cal[1:3])
  end
  return([p1, p2])
end
```

:::

::::

:::: {.columns}

::: {.column width="49%"}

Run our `solve_day` function to get our solution:

```{r}
solve_day(df)
```

:::

::: {.column width="2%"}
<!-- empty column to create gap -->
:::

::: {.column width="49%"}

Run our `solve_day` function to get our solution:

```{julia}
solve_day(df)
```
:::

::::

:::: {.columns}

::: {.column width="49%"}

Run benchmark using `bench::mark()`:

```{r}
select(bench::mark(solve_day(df)), median, mem_alloc)
```

:::

::: {.column width="2%"}
<!-- empty column to create gap -->
:::

::: {.column width="49%"}

Run benchmark using `BenchmarkTools`:

```{julia}
using BenchmarkTools
median(@benchmark solve_day(df))
```
:::

::::